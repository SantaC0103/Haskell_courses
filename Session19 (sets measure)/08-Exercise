
{-@ LIQUID "--no-termination" @-}

module Sets where
import Data.Set hiding (Set, empty, singleton, union, member, intersection, insert, partition, filter, split, elems, difference)
import Prelude  hiding (elem, reverse, filter)

main :: IO ()
main = return ()

{-@ die :: {v:_ | false} -> a @-}
die msg = error msg

isUnique, isNotUnique :: [Int]
mergeSort :: (Ord a) => [a] -> [a]
range :: Int -> Int -> [Int]
-- FIXME
{-@ predicate In X Xs      = Set_mem X Xs            @-}
{-@ predicate Subset X Y   = Set_sub X Y             @-}
{-@ predicate Empty  X     = Set_emp X               @-}
{-@ predicate Inter X Y Z  = X = Set_cap Y Z         @-}
{-@ predicate Union X Y Z  = X = Set_cup Y Z         @-}
{-@ predicate Union1 X Y Z = Union X (Set_sng Y) Z   @-}
{-@ predicate Disjoint X Y = Inter (Set_empty 0) X Y @-}
type List a = [a]

{-@ measure empty        :: Set a @-}
empty        :: {v:Set a | v = empty}
{-@ measure singleton    :: a -> Set a @-}
singleton    :: x:a -> {v:Set a | v = singleton x}
{-@ measure member       :: a -> Set a -> Bool @-}
member       :: x:a
             -> s:Set a
             -> {v:Bool | v <=> member x s}
{-@ measure union        :: Set a -> Set a -> Set a @-}
union        :: x:Set a
             -> y:Set a
             -> {v:Set a | v = union x y}
{-@ measure intersection :: Set a -> Set a -> Set a @-}
intersection :: x:Set a
             -> y:Set a
             -> {v:Set a | v = intersection x y}
{-@ measure difference   :: Set a -> Set a -> Set a @-}
difference   :: x:Set a
             -> y:Set a
             -> {v:Set a | v = difference x y}


{-@ type True  = {v:Bool |     v} @-}
{-@ type False = {v:Bool | not v} @-}

{-@ prop_one_plus_one_eq_two :: _ -> True @-}
prop_one_plus_one_eq_two x   = (x == 1 + 1) `implies` (x == 2)

{-@ implies        :: p:Bool -> q:Bool -> Implies p q  @-}
implies :: Bool -> Bool -> Bool
implies False _    = True
implies _     True = True
implies _    _     = False

{-@ type Implies P Q = {v:_ | v <=> (P => Q)} @-}

{-@ prop_x_y_200 :: _ -> _ -> True @-}
prop_x_y_200 x y = False -- fill in the theorem body
--prop_x_y_200 x y = (x < 100 && y < 100) `implies` (x+y < 200)

{-@ prop_intersection_comm :: _ -> _ -> True @-}
prop_intersection_comm x y
  = (x `intersection` y) == (y `intersection` x)

{-@ prop_union_assoc :: _ -> _ -> _ -> True @-}
prop_union_assoc x y z
  = (x `union` (y `union` z)) == (x `union` y) `union` z

{-@ prop_intersection_dist :: _ -> _ -> _ -> True @-}
prop_intersection_dist x y z
  =  x `intersection` (y `union` z)
     ==
     (x `intersection` y) `union` (x `intersection` z)

{-@ prop_cup_dif_bad :: _ -> _ -> True @-}
prop_cup_dif_bad :: (Ord a) => Set a -> Set a -> Bool
prop_cup_dif_bad x y = pre `implies` (x == ((x `union` y) `difference` y))
  where
    pre = empty == intersection x y 

{-@ measure elts @-}
elts        :: (Ord a) => [a] -> Set a
elts []     = empty
elts (x:xs) = singleton x `union` elts xs

{-@ type ListS a S = {v:[a] | elts v = S} @-}
{-@ type ListEmp a = ListS a {Set_empty 0} @-}
{-@ type ListEq a X = ListS a {elts X}    @-}
{-@ type ListSub a X = {v:[a]| Set_sub (elts v) (elts X)} @-}
{-@ type ListUn a X Y = ListS a {Set_cup (elts X) (elts Y)} @-}
{-@ type ListUn1 a X Y = ListS a {Set_cup (Set_sng X) (elts Y)} @-}

data [a] where
  []  :: ListEmp a
  (:) :: x:a -> xs:[a] -> ListUn1 a x xs

-- FIXME
predicate In X Y       = -- X is an element of Y
predicate Subset X Y   = -- X is a subset of Y
predicate Disjoint X Y = -- X and Y are Disjoint
predicate Empty X      = -- X is empty
predicate Union X Y Z  = -- X is the union of Y and Z
predicate Union1 X Y Z = -- X is the union of {Y} and Z

{-@ append'       :: xs:_ -> ys:_ -> ListUn a xs ys @-}
append' []     ys = ys
append' (x:xs) ys = x : append' xs ys

{-@ reverse' :: xs:[a] -> ListEq a xs @-}
reverse' :: [a] -> [a]
reverse' xs = revHelper [] xs

{-@ revHelper :: xs:[a] -> ys:[a] -> ListUn a xs ys / [len ys] @-}
revHelper :: [a] -> [a] -> [a]
revHelper acc []     = acc
revHelper acc (x:xs) = revHelper (x:acc) xs


--Exercise 1: give a refined type for revHelper


{-@ lazy halve @-}
{-@ halve :: n:Int -> xs:[a] -> {v:([a], [a]) | union (elts (fst v)) (elts (snd v)) = elts xs } @-}
halve            :: Int -> [a] -> ([a], [a])
halve 0 xs       = ([], xs)
halve n (x:y:zs) = (x:xs, y:ys) where (xs, ys) = halve (n-1) zs
halve _ xs       = ([], xs)

{-@ prop_halve_append  :: _ -> _ -> True @-}
prop_halve_append :: Ord a => Int -> [a] -> Bool
prop_halve_append n xs = elts xs == elts xs'
  where
    xs'      =  append' ys zs
    (ys, zs) =  halve n xs

 --Exercise 2: give a refined type for halve

{-@ elem :: (Eq a) => x:a -> xs:[a] -> { v:Bool | v = member x (elts xs) } @-}
--{-@ elem      :: (Eq a) => a -> [a] -> Bool @-}
elem :: Eq a => a -> [a] -> Bool
elem _ []     = False
elem x (y:ys) = x == y || elem x ys

{-@ test1 :: True @-}
test1 :: Bool
test1      = elem 2 [1, 2, 3]

{-@ test2 :: False @-}
test2 :: Bool
test2      = elem 2 [1, 3]

 --Exercise 3: give a refined type for elem


insert x []     = [x]
insert x (y:ys)
  | x <= y      = x : y : ys
  | otherwise   = y : insert x ys

{-@ insert :: x:a -> xs:[a] -> ListUn1 a x xs @-}
{-@ insertSort :: (Ord a) => xs:[a] -> ListEq a xs @-}
insertSort []     = []
insertSort (x:xs) = insert x (insertSort xs)

--{-@ merge :: xs:[a] -> ys:[a] -> [a] @-}
{-@ merge :: xs:[a] -> ys:[a] -> ListUn a xs ys/[len xs, len ys] @-}
merge [] ys          = ys
merge xs []          = xs
merge (x:xs) (y:ys)
  | x <= y           = x : merge xs (y:ys)
  | otherwise        = y : merge (x:xs) ys

{-@ prop_merge_app   :: _ -> _ -> True   @-}
prop_merge_app xs ys = elts zs == elts zs'
  where
    zs               = append' xs ys
    zs'              = merge   xs ys

{-@ lazy mergeSort @-}
--{-@ mergeSort :: (Ord a) => xs:[a] -> ListEmp a @-}
{-@ mergeSort :: (Ord a) => xs:[a] -> ListEq a xs @-}
mergeSort :: Ord a => [a] -> [a]
mergeSort []  = []
mergeSort [x] = [x]
mergeSort xs  = merge (mergeSort ys) (mergeSort zs)
  where
   (ys, zs)   = halve mid xs
   mid        = length xs `div` 2

 --Exercise 4: give a refined type for mergesort. You will first need
 -- to fix a type for halve (Exercise 2)

--{-@ quickSort :: (Ord a) => xs:[a] -> ListEq a xs @-}
--quickSort :: Ord a => [a] -> [a]
--quickSort []     = []
--quickSort (x:xs) = undefined

-- Exercise 5: complete the implementation and prove the refined type

{-@ measure unique @-}
unique        :: (Ord a) => [a] -> Bool
unique []     = True
unique (x:xs) = unique xs && not (member x (elts xs))

{-@ type UList a = {v:[a] | unique v }@-}

{-@ isUnique    :: UList Int @-}
isUnique = [1, 2, 3]           -- accepted by LH

{-@ isNotUnique :: UList Int @-}
isNotUnique = [1, 2, 3, 1]     -- rejected by LH

{-@ filter   :: (a -> Bool)
             -> xs:UList a
             -> {v:ListSub a xs | unique v}
  @-}
filter _ []   = []
filter f (x:xs)
  | f x       = x : xs'
  | otherwise = xs'
  where
    xs'       = filter f xs

{-@ filter' :: (a -> Bool) -> xs:[a] -> { v:ListSub a xs | unique xs => unique v } @-}
filter' :: (a -> Bool) -> [a] -> [a]
filter' _ []   = []
filter' f (x:xs)
  | f x       = x : xs'
  | otherwise = xs'
  where
    xs'       = filter' f xs

{-@ test3 :: UList _ @-}
test3 :: [Int]
test3     = filter' (> 2) [1,2,3,4]

{-@ test4 :: [_] @-}
test4 :: [Int]
test4     = filter' (> 3) [3,1,2,3]
-- Exercise 6: give filter' a refined type


{-@ reverse    :: xs:UList a -> UList a    @-}
reverse :: Ord a => [a] -> [a]
reverse         = go []
  where
    {-@ go :: acc:UList a -> { xs:UList a | intersection (elts acc) (elts xs) = empty } -> UList a / [len xs] @-}
    go acc []     = acc
    go acc (x:xs) = go (x:acc) xs


-- Exercise 7: give go a refined type//已解决 


{-@ nub              :: [a] -> UList a @-}
nub xs                = go [] xs
  where
    {-@ go :: UList a -> xs:[a] -> UList a  / [len xs] @-}
    -- the annotation / [len xs] gives LH a metric for proving termination
    go seen []        = seen
    go seen (x:xs)
      | x `isin` seen = go seen     xs
      | otherwise     = go (x:seen) xs

-- FIXME
{-@ predicate In X Xs = Set_mem X (elts Xs) @-}

{-@ isin :: x:_ -> ys:_ -> {v:Bool | v <=> In x ys }@-}
isin x (y:ys)
  | x == y    = True
  | otherwise = x `isin` ys
isin _ []     = False


{-@ append :: xs:UList a -> ys:{v:UList a | intersection (elts xs) (elts v) = empty} -> {v:UList a | union (elts xs) (elts ys) = elts v } @-}
--{-@ append       :: UList a -> UList a -> UList a @-}
append []     ys = ys
append (x:xs) ys = x : append xs ys


-- Exercise 8: refine the type of append to ensure a unique list as output 

